name: ecommerce-website-build-and-deploy

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - 'main'

jobs:
  ecommerce-website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build container and export to Docker
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile_ecommerce
          load: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-website:${{ github.sha }}

      - uses: lacework/lw-scanner-action@v1.4.0
        name: Scan container image for vulnerabilities using Lacework
        with:
          LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
          LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-website
          IMAGE_TAG: ${{ github.sha }}
          SAVE_BUILD_REPORT: true
          PRETTY_OUTPUT: true
          RESULTS_IN_GITHUB_SUMMARY: true
        env:
         use_policy: true

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile_ecommerce
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-website:${{ github.sha }}

      - uses: azure/setup-kubectl@v3
        name: install kubectl

      - name: set kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: echo $KUBE_CONFIG_DATA | base64 -d > /tmp/k.conf

      - name: deploy to cluster
        run: kubectl set image deployment/ecommerce-website ecommerce-website=$DOCKER_USERNAME/ecommerce-website:$GH_SHA
        id: k8s_deploy
        env:
          KUBECONFIG: /tmp/k.conf
          GH_SHA: ${{ github.sha }}
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}

      - name: wait for deployment to succeed
        run: kubectl rollout status deployment/ecommerce-website --timeout=60s
        id: k8s_deploy_wait
        env:
          KUBECONFIG: /tmp/k.conf
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}

      - name: get events from deployment failure
        if: ${{ failure() && steps.k8s_deploy_wait.conclusion == 'failure' }}
        run: sleep 10 && kubectl events && exit 1
        env:
          KUBECONFIG: /tmp/k.conf
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
